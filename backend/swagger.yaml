openapi: 3.0.0
info:
  title: My Online Shop REST API.
  version: 1.0.0
  description: |
    This API provides a comprehensive set of endpoints for managing an online shop. It includes features for user registration and authentication,
    product management, order processing, admin actions and analytics.
    The API is designed to be easy to use and integrate with various front-end applications.

servers:
  - url: http://127.0.0.1:7000/api/v1
    description: Development server

components:
  schemas:
    UserDetails:
      type: object
      properties:
        _id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        phone:
          type: number
        verified:
          type: boolean
        active:
          type: boolean
        role:
          type: string
        wishlist:
          type: array
          items:
            $ref: '#/components/schemas/ProductDetails'
        address:
          type: array

    ProductDetails:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        brand:
          type: string
        price:
          type: number
        sold:
          type: number
        quantity:
          type: number
        color:
          type: string
        ratings:
          type: array

    BlogDetails:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          type: string
        author:
          type: string

    ProductCategoryDetails:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string

    BrandDetails:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - email
                - password
                - phone
              properties:
                firstname:
                  type: string
                  minLength: 3
                lastname:
                  type: string
                  minLength: 3
                email:
                  type: string
                  format: email
                  pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
                phone:
                  type: string
                  pattern: '^\d{10}$'
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      firstname:
                        type: string
                      lastname:
                        type: string
                      email:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /auth/verify:
    post:
      tags:
        - Authentication
      summary: Verify User Email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties: 
                email:
                  type: string
                  format: email
                  pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
                otp:
                  type: string
                  pattern: '^\d{6}$'
      responses:
        '200':
          description: Email Verification successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login an existing User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties: 
                email:
                  type: string
                  format: email
                  pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /auth/resend:
    post:
      tags:
        - Authentication
      summary: Regenerate a new OTP code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties: 
                email:
                  type: string
                  format: email
                  pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
      responses:
        '200':
          description: OTP regeneration successful. Check email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout the user and destroy the session.
      description: Clears the user session and any associated cookies, effectively logging out the user.
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /user:
    get:
      tags:
        - User Account Actions
      summary: Get details associated with user account
      description: Allows authenticated users to retrieve details of their own account.
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.

  /user/update:
    patch:
      tags:
        - User Account Actions
      summary: Update details of specific user account
      description: Allows authenticated users to update details of their own account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - phone
                - previousPassword
                - password
              properties:
                firstname:
                  type: string
                  minLength: 3
                lastname:
                  type: string
                  minLength: 3
                phone:
                  type: string
                  pattern: '^\d{10}$'
                previousPassword:
                  type: string
                  minLength: 8
                password: 
                  type: string
                  minLength: 8
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.
      
  /user/change-email:
    post:
      tags:
        - User Account Actions
      summary: Change user email.
      description: Allows an authenticated user to change email associated with their own account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties: 
                email:
                  type: string
                  format: email
                  pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
      responses:
        '200':
          description: Email successfully updated. Verify OTP.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.
      

  /user/suspend:
    post:
      tags:
        - User Account Actions
      summary: Deactivate/Suspend user account.
      description: Allows an authenticated user to deactivate/suspend own account.
      responses:
        '200':
          description: Account successfully deactivated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.


  /user/delete:
    delete:
      tags:
        - User Account Actions
      summary: Delete user account.
      description: Allows a registered user to delete their own deactivated account.
      responses:
        '200':
          description: Account successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.


  /admin/users/{id}:
    get:
      tags:
        - Admin Account Actions
      summary: Get details of a specific user.
      description: Allows admins to retrieve details of a specific user account.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user account to retrieve details for.
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.

  /admin/users:
    get:
      tags:
        - Admin Account Actions
      summary: Get details of all registered users.
      description: Allows admins to retrieve details of all registered accounts.
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.      

  /admin/users/suspend/{id}:
    post:
      tags:
        - Admin Account Actions
      summary: Deactivate/Suspend user account.
      description: Allows admin to deactivate/suspend user account.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user account to suspend.
          schema:
            type: string
      responses:
        '200':
          description: Account successfully deactivated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error

  /admin/users/recover/{id}:
    post:
      tags:
        - Admin Account Actions
      summary: Recover deactivated user account.
      description: Allows admin to recover suspended user account.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user account to recover.
          schema:
            type: string
      responses:
        '200':
          description: Account successfully recovered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.

  /admin/users/delete/{id}:
    delete:
      tags:
        - Admin Account Actions
      summary: Delete user account.
      description: Allows admin to delete a specific user account.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user account to delete.
          schema:
            type: string
      responses:
        '200':
          description: Account successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: User not found. The specified user ID does not exist.
        '500':
          description: Internal server error.

  /admin/products/create:
    post:
      tags:
        - Admin Product Actions
      summary: Create / Add a New Product.
      description: Allows admin to create/add a new product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - brand
                - category
                - price
                - quantity
                - color
              properties:
                name:
                  type: string
                description:
                  type: string
                brand:
                  type: string
                category:
                  type: string
                brand: 
                  type: string
                color:
                  type: string
                price:
                  type: number
                quantity:
                  type: number
      responses:
        '200':
          description: Product created successfully.
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/ProductDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /admin/products/update/{id}:
    patch:
      tags:
        - Admin Product Actions
      summary: Update details of a specific product.
      description: Allows admins to update details of a product based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the product to update details for.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - brand
                - category
                - price
                - quantity
                - color
              properties:
                name:
                  type: string
                description:
                  type: string
                brand:
                  type: string
                category:
                  type: string
                brand: 
                  type: string
                color:
                  type: string
                price:
                  type: number
                quantity:
                  type: number  
      responses:
        '200':
          description: Product details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: Product not Found.
        '500':
          description: Internal server error.
    

  /admin/products/delete/{id}:
    delete:
      tags:
        - Admin Product Actions
      summary: Delete a specific product.
      description: Allows admin to delete a product based on its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the product to delete.
          schema:
            type: string
      responses:
        '200':
          description: Product successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /products/{id}:
    get:
      tags:
        - Product Actions
      summary: Get details of a specific product.
      description: Allows any user to retrieve details of a specific product based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the product to retrieve details for.
          schema:
            type: string
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        '404':
          description: Product not Found.
        '500':
          description: Internal server error.

  /products:
    get:
      tags:
        - Product Actions
      summary: Get all products
      description: | 
        Allows any user to retrieve all products.
        Supports filtering by name, brand, category, and price range.
        If no query parameters are provided, all products available will be returned.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            description: The page number for pagination (default: 1)
        - in: query
          name: limit
          schema:
            type: integer
            description: The number of products per page (default: 10)
        - in: query
          name: sortBy
          schema:
            type: string
            description: The field to sort the products by (default: createdAt)
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            description: The sort order (asc for ascending, desc for descending, default: asc)
        - in: query
          name: name
          schema:
            type: string
            description: Filter products by name (case-insensitive)
        - in: query
          name: brand
          schema:
            type: string
            description: Filter products by brand (case-insensitive)
        - in: query
          name: category
          schema:
            type: string
            description: Filter products by category (case-insensitive)
        - in: query
          name: minPrice
          schema:
            type: number
            description: Filter products by minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
            description: Filter products by maximum price
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        '500':
          description: Internal server error. 

  /products/wishlist/me:
    get:
      tags:
        - Product Actions
      summary: Retrive user's wishlist.
      description: Allows authenticated users to view all products in their wishlist.
      responses:
        '200':
          description: Wishlist retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        '400':
          description: Bad request.
        '404':
          description: Not Found.
        '500':
          description: Internal server error.

  /products/wishlist:
    patch:
      tags:
        - Product Actions
      summary: Add / Remove a specific product from wishlist.
      description: Allows authenticated users to add / remove a product from their wishlist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productID
              properties:
                productID:
                  type: string
      responses:
        '200':
          description: Wishlist updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Bad request.
        '404':
          description: Not Found.
        '500':
          description: Internal server error.


  /products/rate:
    patch:
      tags:
        - Product Actions
      summary: Rate a specific product.
      description: Allows authenticated users to rate a product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productID
                - star
                - comment
              properties:
                productID:
                  type: string
                star:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Product rated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        '400':
          description: Bad request.
        '404':
          description: Not Found.
        '500':
          description: Internal server error.

  /admin/blog/create:
    post:
      tags:
        - Admin Blog Actions
      summary: Write / Create a new Blog post.
      description: Allows admin to write / create a new Blog Post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - category
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
      responses:
        '200':
          description: Blog post created successfully.
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/BlogDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /admin/blog/edit/{id}:
    patch:
      tags:
        - Admin Blog Actions
      summary: Edit a specific blog post.
      description: Allows admins to edit a specific blog post based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the blog post to edit.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - category
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string 
      responses:
        '200':
          description: Blog post edited successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: Blog post not Found.
        '500':
          description: Internal server error.
    

  /admin/blog/delete/{id}:
    delete:
      tags:
        - Admin Blog Actions
      summary: Delete a specific blog post.
      description: Allows admin to delete a blog post based on its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the blog post to delete.
          schema:
            type: string
      responses:
        '200':
          description: Blog post successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /blog/{id}:
    get:
      tags:
        - Blog Actions
      summary: Get a specific blog post.
      description: Allows any user to retrieve a specific blog post based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the blog post to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Blog post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogDetails'
        '404':
          description: Blog not Found.
        '500':
          description: Internal server error.

  /blog:
    get:
      tags:
        - Blog Actions
      summary: Get all blog posts.
      description: | 
        Allows any user to retrieve all blog posts.
      responses:
        '200':
          description: Blog Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogDetails'
        '500':
          description: Internal server error.

  /admin/product/category/create:
    post:
      tags:
        - Admin Product Category Actions
      summary: Write / Create a new Product Category.
      description: Allows admin to write / create a new Product Category.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Product Category created successfully.
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/ProductCategoryDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /admin/product/category/update/{id}:
    patch:
      tags:
        - Admin Product Category Actions
      summary: Edit a specific Product Category.
      description: Allows admins to update a specific Product Category based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Product Category to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Product Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: Product Category not Found.
        '500':
          description: Internal server error.
    

  /admin/product/category/delete/{id}:
    delete:
      tags:
        - Admin Product Category Actions
      summary: Delete a specific Product Category.
      description: Allows admin to delete a Product Category based on its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Product Category to delete.
          schema:
            type: string
      responses:
        '200':
          description: Product Category successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /product/categories/{id}:
    get:
      tags:
        - Product Category Actions
      summary: Get a specific Product Category.
      description: Allows any user to retrieve a Product Category based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Product Category to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Product Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetails'
        '404':
          description: Product Category not Found.
        '500':
          description: Internal server error.

  /product/categories:
    get:
      tags:
        - Product Category Actions
      summary: Get all Product Categories.
      description: | 
        Allows any user to retrieve all Product Categories.
      responses:
        '200':
          description: Product Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetails'
        '500':
          description: Internal server error.

  /admin/brand/create:
    post:
      tags:
        - Admin Brand Actions
      summary: Write / Create a new Brand.
      description: Allows admin to write / create a new Brand.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Brand created successfully.
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/BrandDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /admin/brand/update/{id}:
    patch:
      tags:
        - Admin Brand Actions
      summary: Edit a specific Brand.
      description: Allows admins to update a specific Brand based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Brand to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Brand updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetails'
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '404':
          description: Brand not Found.
        '500':
          description: Internal server error.
    

  /admin/brand/delete/{id}:
    delete:
      tags:
        - Admin Brand Actions
      summary: Delete a specific Brand.
      description: Allows admin to delete a Brand based on its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Brand to delete.
          schema:
            type: string
      responses:
        '200':
          description: Brand successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User is not authorized to access this resource.
        '500':
          description: Internal server error.

  /brands/{id}:
    get:
      tags:
        - Brand Actions
      summary: Get a specific Brand.
      description: Allows any user to retrieve a Brand based on ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Brand to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Brand retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetails'
        '404':
          description: Brand not Found.
        '500':
          description: Internal server error.

  /brands:
    get:
      tags:
        - Brand Actions
      summary: Get all Brands.
      description: | 
        Allows any user to retrieve all Brands.
      responses:
        '200':
          description: Brand retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetails'
        '500':
          description: Internal server error. 